# This is a basic workflow to help you get started with Actions

name: Build - CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT }}
          
      # Builds and exports image
      - 
        name: Build Docker Image and Save It
        uses: docker/build-push-action@v2
        with:
          tags: autodqmwebapp:latest
          cache-from: ghcr.io/jrotter2/autodqmwebapp:cache
          cache-to: ghcr.io/jrotter2/autodqmwebapp:cache
          outputs: type=docker,dest=/tmp/autodqm.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: autodqm
          path: /tmp/autodqm.tar
  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: autodqm
          path: /tmp
          
      - name: Pushing to registry.cern.ch
        run: |
           echo ${{ secrets.CERN_LOGIN }}
           docker login -u ${{ secrets.CERN_LOGIN }} -p ${{ secrets.CERN_TOKEN }} registry.cern.ch
           docker load --input /tmp/autodqm.tar
           docker tag autodqm:latest registry.cern.ch/cmsweb/autodqm:latest
           docker push registry.cern.ch/cmsweb/autodqm:latest
